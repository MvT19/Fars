n5<-fsReadTimeseries(V12,6,329,6)
n6<-fsReadTimeseries(V12,6,330,6)
n7<-fsReadTimeseries(V12,6,331,6)
n8<-fsReadTimeseries(V12,6,332,6)
n9<-fsReadTimeseries(V12,6,333,6)
n10<-fsReadTimeseries(V12,6,334,6)
n11<-fsReadTimeseries(V12,6,335,6)
n12<-fsReadTimeseries(V12,6,336,6)
n13<-fsReadTimeseries(V12,6,337,6)
n14<-fsReadTimeseries(V12,6,338,6)
n15<-fsReadTimeseries(V12,6,339,6)
n16<-fsReadTimeseries(V12,6,340,6)
n17<-fsReadTimeseries(V12,6,341,6)
n18<-fsReadTimeseries(V12,6,342,6)
n19<-fsReadTimeseries(V12,6,343,6)
n20<-fsReadTimeseries(V12,6,344,6)
n21<-fsReadTimeseries(V12,6,345,6)
n22<-fsReadTimeseries(V12,6,346,6)
n23<-fsReadTimeseries(V12,6,347,6)
n24<-fsReadTimeseries(V12,6,348,6)
n25<-fsReadTimeseries(V12,6,349,6)
n26<-fsReadTimeseries(V12,6,350,6)
n27<-fsReadTimeseries(V12,6,351,6)
n28<-fsReadTimeseries(V12,6,352,6)
n29<-fsReadTimeseries(V12,6,353,6)
n30<-fsReadTimeseries(V12,6,354,6)
n31<-fsReadTimeseries(V12,6,355,6)
n32<-fsReadTimeseries(V12,6,356,6)
n33<-fsReadTimeseries(V12,6,357,6)
n34<-fsReadTimeseries(V12,6,358,6)
n35<-fsReadTimeseries(V12,6,359,6)
n36<-fsReadTimeseries(V12,6,360,6)
n37<-fsReadTimeseries(V12,6,361,6)
n38<-fsReadTimeseries(V12,6,362,6)
n39<-fsReadTimeseries(V12,6,363,6)
n40<-fsReadTimeseries(V12,6,364,6)
n41<-fsReadTimeseries(V12,6,365,6)
n42<-fsReadTimeseries(V12,6,366,6)
n43<-fsReadTimeseries(V12,6,367,6)
n44<-fsReadTimeseries(V12,6,368,6)
n45<-fsReadTimeseries(V12,6,369,6)
n46<-fsReadTimeseries(V12,6,370,6)
n47<-fsReadTimeseries(V12,6,371,6)
n48<-fsReadTimeseries(V12,6,372,6)
n49<-fsReadTimeseries(V12,6,373,6)
n50<-fsReadTimeseries(V12,6,374,6)
n51<-fsReadTimeseries(V12,6,375,6)
n52<-fsReadTimeseries(V12,6,376,6)
n53<-fsReadTimeseries(V12,6,377,6)
n54<-fsReadTimeseries(V12,6,378,6)
n55<-fsReadTimeseries(V12,6,379,6)
n56<-fsReadTimeseries(V12,6,380,6)
n57<-fsReadTimeseries(V12,6,381,6)
n58<-fsReadTimeseries(V12,6,382,6)
n59<-fsReadTimeseries(V12,6,383,6)
n60<-fsReadTimeseries(V12,6,384,6)
n61<-fsReadTimeseries(V12,6,385,6)
n62<-fsReadTimeseries(V12,6,386,6)
n63<-fsReadTimeseries(V12,6,387,6)
n64<-fsReadTimeseries(V12,6,388,6)
n65<-fsReadTimeseries(V12,6,389,6)
n66<-fsReadTimeseries(V12,6,390,6)
n67<-fsReadTimeseries(V12,6,391,6)
n68<-fsReadTimeseries(V12,6,392,6)
n69<-fsReadTimeseries(V12,6,393,6)
n70<-fsReadTimeseries(V12,6,394,6)
n71<-fsReadTimeseries(V12,6,395,6)
n72<-fsReadTimeseries(V12,6,396,6)
n73<-fsReadTimeseries(V12,6,397,6)
n74<-fsReadTimeseries(V12,6,398,6)
n75<-fsReadTimeseries(V12,6,399,6)
n76<-fsReadTimeseries(V12,6,400,6)
n77<-fsReadTimeseries(V12,6,401,6)
n78<-fsReadTimeseries(V12,6,402,6)
n79<-fsReadTimeseries(V12,6,403,6)
n80<-fsReadTimeseries(V12,6,404,6)
n81<-fsReadTimeseries(V12,6,405,6)
n82<-fsReadTimeseries(V12,6,406,6)
n83<-fsReadTimeseries(V12,6,407,6)
n84<-fsReadTimeseries(V12,6,408,6)
n85<-fsReadTimeseries(V12,6,409,6)
n86<-fsReadTimeseries(V12,6,410,6)
n87<-fsReadTimeseries(V12,6,411,6)
n88<-fsReadTimeseries(V12,6,412,6)
n89<-fsReadTimeseries(V12,6,413,6)
n90<-fsReadTimeseries(V12,6,414,6)
n91<-fsReadTimeseries(V12,6,415,6)
n92<-fsReadTimeseries(V12,6,416,6)
n93<-fsReadTimeseries(V12,6,417,6)
n94<-fsReadTimeseries(V12,6,418,6)
n95<-fsReadTimeseries(V12,6,419,6)
n96<-fsReadTimeseries(V12,6,420,6)
n97<-fsReadTimeseries(V12,6,421,6)
n98<-fsReadTimeseries(V12,6,422,6)
n99<-fsReadTimeseries(V12,6,423,6)
n100<-fsReadTimeseries(V12,6,424,6)
m1<-fsReadTimeseries(V12,6,325,7)
m2<-fsReadTimeseries(V12,6,326,7)
m3<-fsReadTimeseries(V12,6,327,7)
m4<-fsReadTimeseries(V12,6,328,7)
m5<-fsReadTimeseries(V12,6,329,7)
m6<-fsReadTimeseries(V12,6,330,7)
m7<-fsReadTimeseries(V12,6,331,7)
m8<-fsReadTimeseries(V12,6,332,7)
m9<-fsReadTimeseries(V12,6,333,7)
m10<-fsReadTimeseries(V12,6,334,7)
m11<-fsReadTimeseries(V12,6,335,7)
m12<-fsReadTimeseries(V12,6,336,7)
m13<-fsReadTimeseries(V12,6,337,7)
m14<-fsReadTimeseries(V12,6,338,7)
m15<-fsReadTimeseries(V12,6,339,7)
m16<-fsReadTimeseries(V12,6,340,7)
m17<-fsReadTimeseries(V12,6,341,7)
m18<-fsReadTimeseries(V12,6,342,7)
m19<-fsReadTimeseries(V12,6,343,7)
m20<-fsReadTimeseries(V12,6,344,7)
m21<-fsReadTimeseries(V12,6,345,7)
m22<-fsReadTimeseries(V12,6,346,7)
m23<-fsReadTimeseries(V12,6,347,7)
m24<-fsReadTimeseries(V12,6,348,7)
m25<-fsReadTimeseries(V12,6,349,7)
m26<-fsReadTimeseries(V12,6,350,7)
m27<-fsReadTimeseries(V12,6,351,7)
m28<-fsReadTimeseries(V12,6,352,7)
m29<-fsReadTimeseries(V12,6,353,7)
m30<-fsReadTimeseries(V12,6,354,7)
m31<-fsReadTimeseries(V12,6,355,7)
m32<-fsReadTimeseries(V12,6,356,7)
m33<-fsReadTimeseries(V12,6,357,7)
m34<-fsReadTimeseries(V12,6,358,7)
m35<-fsReadTimeseries(V12,6,359,7)
m36<-fsReadTimeseries(V12,6,360,7)
m37<-fsReadTimeseries(V12,6,361,7)
m38<-fsReadTimeseries(V12,6,362,7)
m39<-fsReadTimeseries(V12,6,363,7)
m40<-fsReadTimeseries(V12,6,364,7)
m41<-fsReadTimeseries(V12,6,365,7)
m42<-fsReadTimeseries(V12,6,366,7)
m43<-fsReadTimeseries(V12,6,367,7)
m44<-fsReadTimeseries(V12,6,368,7)
m45<-fsReadTimeseries(V12,6,369,7)
m46<-fsReadTimeseries(V12,6,370,7)
m47<-fsReadTimeseries(V12,6,371,7)
m48<-fsReadTimeseries(V12,6,372,7)
m49<-fsReadTimeseries(V12,6,373,7)
m50<-fsReadTimeseries(V12,6,374,7)
m51<-fsReadTimeseries(V12,6,375,7)
m52<-fsReadTimeseries(V12,6,376,7)
m53<-fsReadTimeseries(V12,6,377,7)
m54<-fsReadTimeseries(V12,6,378,7)
m55<-fsReadTimeseries(V12,6,379,7)
m56<-fsReadTimeseries(V12,6,380,7)
m57<-fsReadTimeseries(V12,6,381,7)
m58<-fsReadTimeseries(V12,6,382,7)
m59<-fsReadTimeseries(V12,6,383,7)
m60<-fsReadTimeseries(V12,6,384,7)
m61<-fsReadTimeseries(V12,6,385,7)
m62<-fsReadTimeseries(V12,6,386,7)
m63<-fsReadTimeseries(V12,6,387,7)
m64<-fsReadTimeseries(V12,6,388,7)
m65<-fsReadTimeseries(V12,6,389,7)
m66<-fsReadTimeseries(V12,6,390,7)
m67<-fsReadTimeseries(V12,6,391,7)
m68<-fsReadTimeseries(V12,6,392,7)
m69<-fsReadTimeseries(V12,6,393,7)
m70<-fsReadTimeseries(V12,6,394,7)
m71<-fsReadTimeseries(V12,6,395,7)
m72<-fsReadTimeseries(V12,6,396,7)
m73<-fsReadTimeseries(V12,6,397,7)
m74<-fsReadTimeseries(V12,6,398,7)
m75<-fsReadTimeseries(V12,6,399,7)
m76<-fsReadTimeseries(V12,6,400,7)
m77<-fsReadTimeseries(V12,6,401,7)
m78<-fsReadTimeseries(V12,6,402,7)
m79<-fsReadTimeseries(V12,6,403,7)
m80<-fsReadTimeseries(V12,6,404,7)
m81<-fsReadTimeseries(V12,6,405,7)
m82<-fsReadTimeseries(V12,6,406,7)
m83<-fsReadTimeseries(V12,6,407,7)
m84<-fsReadTimeseries(V12,6,408,7)
m85<-fsReadTimeseries(V12,6,409,7)
m86<-fsReadTimeseries(V12,6,410,7)
m87<-fsReadTimeseries(V12,6,411,7)
m88<-fsReadTimeseries(V12,6,412,7)
m89<-fsReadTimeseries(V12,6,413,7)
m90<-fsReadTimeseries(V12,6,414,7)
m91<-fsReadTimeseries(V12,6,415,7)
m92<-fsReadTimeseries(V12,6,416,7)
m93<-fsReadTimeseries(V12,6,417,7)
m94<-fsReadTimeseries(V12,6,418,7)
m95<-fsReadTimeseries(V12,6,419,7)
m96<-fsReadTimeseries(V12,6,420,7)
m97<-fsReadTimeseries(V12,6,421,7)
m98<-fsReadTimeseries(V12,6,422,7)
m99<-fsReadTimeseries(V12,6,423,7)
m100<-fsReadTimeseries(V12,6,424,7)
o1<-fsReadTimeseries(V12,6,325,5)
o2<-fsReadTimeseries(V12,6,326,5)
o3<-fsReadTimeseries(V12,6,327,5)
o4<-fsReadTimeseries(V12,6,328,5)
o5<-fsReadTimeseries(V12,6,329,5)
o6<-fsReadTimeseries(V12,6,330,5)
o7<-fsReadTimeseries(V12,6,331,5)
o8<-fsReadTimeseries(V12,6,332,5)
o9<-fsReadTimeseries(V12,6,333,5)
o10<-fsReadTimeseries(V12,6,334,5)
o11<-fsReadTimeseries(V12,6,335,5)
o12<-fsReadTimeseries(V12,6,336,5)
o13<-fsReadTimeseries(V12,6,337,5)
o14<-fsReadTimeseries(V12,6,338,5)
o15<-fsReadTimeseries(V12,6,339,5)
o16<-fsReadTimeseries(V12,6,340,5)
o17<-fsReadTimeseries(V12,6,341,5)
o18<-fsReadTimeseries(V12,6,342,5)
o19<-fsReadTimeseries(V12,6,343,5)
o20<-fsReadTimeseries(V12,6,344,5)
o21<-fsReadTimeseries(V12,6,345,5)
o22<-fsReadTimeseries(V12,6,346,5)
o23<-fsReadTimeseries(V12,6,347,5)
o24<-fsReadTimeseries(V12,6,348,5)
o25<-fsReadTimeseries(V12,6,349,5)
o26<-fsReadTimeseries(V12,6,350,5)
o27<-fsReadTimeseries(V12,6,351,5)
o28<-fsReadTimeseries(V12,6,352,5)
o29<-fsReadTimeseries(V12,6,353,5)
o30<-fsReadTimeseries(V12,6,354,5)
o31<-fsReadTimeseries(V12,6,355,5)
o32<-fsReadTimeseries(V12,6,356,5)
o33<-fsReadTimeseries(V12,6,357,5)
o34<-fsReadTimeseries(V12,6,358,5)
o35<-fsReadTimeseries(V12,6,359,5)
o36<-fsReadTimeseries(V12,6,360,5)
o37<-fsReadTimeseries(V12,6,361,5)
o38<-fsReadTimeseries(V12,6,362,5)
o39<-fsReadTimeseries(V12,6,363,5)
o40<-fsReadTimeseries(V12,6,364,5)
o41<-fsReadTimeseries(V12,6,365,5)
o42<-fsReadTimeseries(V12,6,366,5)
o43<-fsReadTimeseries(V12,6,367,5)
o44<-fsReadTimeseries(V12,6,368,5)
o45<-fsReadTimeseries(V12,6,369,5)
o46<-fsReadTimeseries(V12,6,370,5)
o47<-fsReadTimeseries(V12,6,371,5)
o48<-fsReadTimeseries(V12,6,372,5)
o49<-fsReadTimeseries(V12,6,373,5)
o50<-fsReadTimeseries(V12,6,374,5)
o51<-fsReadTimeseries(V12,6,375,5)
o52<-fsReadTimeseries(V12,6,376,5)
o53<-fsReadTimeseries(V12,6,377,5)
o54<-fsReadTimeseries(V12,6,378,5)
o55<-fsReadTimeseries(V12,6,379,5)
o56<-fsReadTimeseries(V12,6,380,5)
o57<-fsReadTimeseries(V12,6,381,5)
o58<-fsReadTimeseries(V12,6,382,5)
o59<-fsReadTimeseries(V12,6,383,5)
o60<-fsReadTimeseries(V12,6,384,5)
o61<-fsReadTimeseries(V12,6,385,5)
o62<-fsReadTimeseries(V12,6,386,5)
o63<-fsReadTimeseries(V12,6,387,5)
o64<-fsReadTimeseries(V12,6,388,5)
o65<-fsReadTimeseries(V12,6,389,5)
o66<-fsReadTimeseries(V12,6,390,5)
o67<-fsReadTimeseries(V12,6,391,5)
o68<-fsReadTimeseries(V12,6,392,5)
o69<-fsReadTimeseries(V12,6,393,5)
o70<-fsReadTimeseries(V12,6,394,5)
o71<-fsReadTimeseries(V12,6,395,5)
o72<-fsReadTimeseries(V12,6,396,5)
o73<-fsReadTimeseries(V12,6,397,5)
o74<-fsReadTimeseries(V12,6,398,5)
o75<-fsReadTimeseries(V12,6,399,5)
o76<-fsReadTimeseries(V12,6,400,5)
o77<-fsReadTimeseries(V12,6,401,5)
o78<-fsReadTimeseries(V12,6,402,5)
o79<-fsReadTimeseries(V12,6,403,5)
o80<-fsReadTimeseries(V12,6,404,5)
o81<-fsReadTimeseries(V12,6,405,5)
o82<-fsReadTimeseries(V12,6,406,5)
o83<-fsReadTimeseries(V12,6,407,5)
o84<-fsReadTimeseries(V12,6,408,5)
o85<-fsReadTimeseries(V12,6,409,5)
o86<-fsReadTimeseries(V12,6,410,5)
o87<-fsReadTimeseries(V12,6,411,5)
o88<-fsReadTimeseries(V12,6,412,5)
o89<-fsReadTimeseries(V12,6,413,5)
o90<-fsReadTimeseries(V12,6,414,5)
o91<-fsReadTimeseries(V12,6,415,5)
o92<-fsReadTimeseries(V12,6,416,5)
o93<-fsReadTimeseries(V12,6,417,5)
o94<-fsReadTimeseries(V12,6,418,5)
o95<-fsReadTimeseries(V12,6,419,5)
o96<-fsReadTimeseries(V12,6,420,5)
o97<-fsReadTimeseries(V12,6,421,5)
o98<-fsReadTimeseries(V12,6,422,5)
o99<-fsReadTimeseries(V12,6,423,5)
o100<-fsReadTimeseries(V12,6,424,5)
list_v <- mget(paste("v", 1:100, sep=""))
SL_mean<-cbind(list_v)
str(Sl_mean)
str(SL_mean)
SL_mean<-cbind(list_v)%>%
select(,ends_with("SL"))
SL_mean<-cbind(list_v)%>%
select(ends_with("SL"))
str(SL_mean)
SL_mean<-cbind.data.frame(list_v)%>%
select(ends_with("SL"))
View(SL_mean)
SL_mean<-cbind.data.frame(list_v)%>%
select(ends_with("SL"))%>%
select([1:20].)
SL_mean<-cbind.data.frame(list_v)%>%
select(ends_with("SL"))%>%
select([1:20].)
SL_mean<-cbind.data.frame(list_v)%>%
select(ends_with("SL"))%>%
select(.[1:20])
SL_mean<-cbind.data.frame(list_v)%>%
select(ends_with("SL"))%>%
select[1:20]
SL_mean<-cbind.data.frame(list_v)%>%
select(ends_with("SL"))%>%
select(1, 1:20)
SL_mean<-cbind.data.frame(list_v)%>%
select(ends_with("SL"))%>%
select(1:20)
SL_mean<-cbind.data.frame(list_v)%>%
select(ends_with("SL"))%>%
select(,1:20)
SL_mean<-cbind.data.frame(list_v)%>%
select(ends_with("SL"))%>%
select(1:20,1:20)
SL<-SL_mean[1385:1400,]
View(SL)
SL_m<-data.matrix(SL)
str(SL_m)
str(volcano)
View(volcano)
p <- plot_ly(z = ~SL_m) %>% add_surface()
library(plotly)
p <- plot_ly(z = ~volcano) %>% add_surface()
p
p <- plot_ly(z = ~SL_m) %>% add_surface()
p
setwd("D:\Documents\AAU PhD\PhD Kurse\The R Programming Environment\Fars")
setwd("D:\\Documents\\AAU PhD\\PhD Kurse\\The R Programming Environment\\Fars")
devtools::check()
?dplyr
devtools::check()
dplyr::bind_rows(dat_list) %>%
dplyr::group_by(year, MONTH) %>%
dplyr::summarize(n = n()) %>%
tidyr::spread(year, n)
#'
#'
#' Read data from the "Fatality Analysis Reporting System (FARS)"
#' This is a function that reads in data from the US National Highway Traffic Safety Administration's
#' Fatality Analysis Reporting System. It checks if the the data file exists and if so reads in the csv data,
#' (using the \code{fars_read} argument). If the file does not exists, it prints "file "filename" does not exist".
#' The data is turned into a dataframe table. The function requires functions from the packages readr and dyplr.
#'
#' @param filename The name of the file that is read in.
#'
#' @importFrom readr read_csv
#' @importFrom dplyr tbl_df
#'
#' @return This function reads in csv data, if the specified filename exists in the working directory,
#'    and turns it into a dataframe table. If the filename does not exist, "file "filename" does not exists" is printed.
#'
#' @examples
#' \dontrun{fars_read("accident_2013.csv")}
#'
#' @export
fars_read <- function(filename) {
if(!file.exists(filename))
stop("file '", filename, "' does not exist")
data <- suppressMessages({
readr::read_csv(filename, progress = FALSE)
})
dplyr::tbl_df(data)
}
#' Create a filename based on the input year
#'
#' This is a function that returns a filename in the format "accident_year.csv.bz2",
#' where you can specify the year.
#'
#' @param year The year which you want in your filename.
#'
#' @return This function creates a filename that shows the specified year in the filename.
#'
#' @examples
#' \dontrun{make_filename(2013)}
#'
#' @export
make_filename <- function(year) {
year <- as.integer(year)
sprintf("accident_%d.csv.bz2", year)
}
#' Read in "FARS" data by specifying the year
#'
#' This is a function that reads in FARS data by using as an input the year.
#' It returns the months and year as a list. An warning message is thrown, when an invalid year is chosen
#' as an input.
#'
#' @param years The input year. If the input year does not exist,
#'    a warning message is thrown: invalid year "year".
#'
#' @importFrom dplyr mutate
#' @importFrom dplyr select
#'
#' @return This function creates a list of the months and year for data specified with the input year.
#'
#' @examples
#' \dontrun{fars_read_years(2013)}
#'
#' @export
fars_read_years <- function(years) {
lapply(years, function(year) {
file <- make_filename(year)
tryCatch({
dat <- fars_read(file)
dplyr::mutate(dat, year = year) %>%
dplyr::select(MONTH, year)
}, error = function(e) {
warning("invalid year: ", year)
return(NULL)
})
})
}
#' Summarize number per month in a specified year
#'
#' This function summarizes "FARS" data per month in a given year, that
#' is specifid in the input
#'
#' @param years The input year for which to summarize the data
#'
#' @importFrom dplyr bind_rows
#' @importFrom dplyr group_by
#' @importFrom dplyr summarize
#' @importFrom tidyr spread
#' @importFrom magrittr %>%
#'
#' @return This function returns a summary of the data grouped by months in
#'    a given year.
#'
#' @examples
#' \dontrun{fars_summarize_years(2013)}
#'
#' @export
fars_summarize_years <- function(years) {
dat_list <- fars_read_years(years)
dplyr::bind_rows(dat_list) %>%
dplyr::group_by(year, MONTH) %>%
dplyr::summarize(n = n()) %>%
tidyr::spread(year, n)
}
#' Plot a map of a givne state with distribution of accidents
#'
#' This function plots the geographical boundaries of a state and the distribution of reported accidents within the state.
#' State number and reporting years are required for the input.
#'
#' @param state.num The number of the state. If an invalid state number is chosen,
#'    an error message ("invalid STATE number: ") is thrown.
#' @param year The year. If there are no accidents in a given year and state,
#'    the message "no accidents to plot" is thrown.
#'
#' @importFrom dplyr filter
#' @importFrom maps map
#' @importFrom graphics points
#'
#' @return This function returns a map of the a given state, showing the distribution of accidents in a given year.
#'
#'  @examples
#' \dontrun{fars_map_state(18, 2013)}
#'
#' @export
fars_map_state <- function(state.num, year) {
filename <- make_filename(year)
data <- fars_read(filename)
state.num <- as.integer(state.num)
if(!(state.num %in% unique(data$STATE)))
stop("invalid STATE number: ", state.num)
data.sub <- dplyr::filter(data, STATE == state.num)
if(nrow(data.sub) == 0L) {
message("no accidents to plot")
return(invisible(NULL))
}
is.na(data.sub$LONGITUD) <- data.sub$LONGITUD > 900
is.na(data.sub$LATITUDE) <- data.sub$LATITUDE > 90
with(data.sub, {
maps::map("state", ylim = range(LATITUDE, na.rm = TRUE),
xlim = range(LONGITUD, na.rm = TRUE))
graphics::points(LONGITUD, LATITUDE, pch = 46)
})
}
fars_read_years <- function(years) {
lapply(years, function(year) {
file <- make_filename(year)
tryCatch({
dat <- fars_read(file)
dplyr::mutate(dat, year = year) %>%
dplyr::select(MONTH, year)
}, error = function(e) {
warning("invalid year: ", year)
return(NULL)
})
})
}
devtools::document()
devtools::test()
devtools::check()
devtools::check()
